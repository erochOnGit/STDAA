/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var m=Object.create;var u=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var P=Object.getPrototypeOf,E=Object.prototype.hasOwnProperty;var T=(o,n)=>{for(var t in n)u(o,t,{get:n[t],enumerable:!0})},f=(o,n,t,r)=>{if(n&&typeof n=="object"||typeof n=="function")for(let e of w(n))!E.call(o,e)&&e!==t&&u(o,e,{get:()=>n[e],enumerable:!(r=v(n,e))||r.enumerable});return o};var k=(o,n,t)=>(t=o!=null?m(P(o)):{},f(n||!o||!o.__esModule?u(t,"default",{value:o,enumerable:!0}):t,o)),b=o=>f(u({},"__esModule",{value:!0}),o);var R={};T(R,{default:()=>g});module.exports=b(R);var d=k(require("path")),h=require("obsidian"),g=class extends h.Plugin{constructor(){super(...arguments);this.cursorPos=null}async onload(){console.log("format on drop unable"),this.registerDomEvent(document,"dragover",t=>{let r=t.target,e=this.getEditorFromTarget(r);if(e){let a=e.cm,{clientX:i,clientY:c}=t;if(!e.containerEl)return null;let s=a.posAtCoords({x:i,y:c});e.focus(),this.cursorPos=e.offsetToPos(s)}}),this.registerDomEvent(document,"drop",t=>{var a;t.preventDefault(),t.stopImmediatePropagation();let r=t.target,e=(a=t.dataTransfer)==null?void 0:a.getData("text");if(e){let i="",c=this.getObsidianUrl(r);if(c){let s=this.extractRelativePath(c),p=this.extractRelativePath(e);s&&p&&(i=`![Image](${this.getRelativePath(s,p)})`)}let l=this.getEditorFromTarget(r);if(l){let s={line:0,ch:0};this.cursorPos?s=this.cursorPos:s=l.getCursor(),l.replaceRange(i,s),setTimeout(()=>{l.focus(),l.setCursor({line:s.line,ch:s.ch+i.length})},500)}else console.warn("No editor found for target element.")}else console.warn("No text found in drop event.")},!0)}onunload(){console.log("Plugin unloaded")}getEditorFromTarget(t){for(let r of this.app.workspace.getLeavesOfType("markdown")){let e=r.view,a=e.editor;if(e.containerEl.contains(t))return a}return null}getAbsolutePath(t){for(let r of this.app.workspace.getLeavesOfType("markdown")){let e=r.view,a=this.app.workspace.getActiveFile();if(a)return this.app.vault.getResourcePath(a)}return null}getObsidianUrl(t){for(let r of this.app.workspace.getLeavesOfType("markdown")){let e=r.view,a=this.app.workspace.getActiveFile();if(a){let i=this.app.vault.getName(),c=a.path;return`obsidian://open?vault=${encodeURIComponent(i)}&file=${encodeURIComponent(c)}`}}return null}extractRelativePath(t){return new URL(t).searchParams.get("file")}getRelativePath(t,r){let e=d.dirname(t);return d.relative(e,r)}formatDroppedText(t){if(t.startsWith("obsidian://open?vault="))try{let r=new URL(t);return`![Image](${decodeURIComponent(r.searchParams.get("file")||"")})`}catch(r){return console.error("Error parsing dropped text:",r),t}return t}};
