/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var g=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var h=Object.prototype.hasOwnProperty;var w=(s,n)=>{for(var e in n)g(s,e,{get:n[e],enumerable:!0})},v=(s,n,e,o)=>{if(n&&typeof n=="object"||typeof n=="function")for(let t of m(n))!h.call(s,t)&&t!==e&&g(s,t,{get:()=>n[t],enumerable:!(o=f(n,t))||o.enumerable});return s};var E=s=>v(g({},"__esModule",{value:!0}),s);var P={};w(P,{default:()=>u});module.exports=E(P);var p=require("obsidian"),u=class extends p.Plugin{constructor(){super(...arguments);this.cursorPos=null}async onload(){console.log("format on drop unable"),this.registerDomEvent(document,"dragover",e=>{let o=e.target,t=this.getEditorFromTarget(o);if(t){let r=t.cm,{clientX:a,clientY:l}=e;if(!t.containerEl)return null;let i=r.posAtCoords({x:a,y:l});t.focus(),this.cursorPos=t.offsetToPos(i)}}),this.registerDomEvent(document,"drop",e=>{var r;e.preventDefault(),e.stopImmediatePropagation();let o=e.target,t=(r=e.dataTransfer)==null?void 0:r.getData("text");if(t){let a=this.formatDroppedText(t),l=this.getAbsolutePath(o),d=this.getObsidianUrl(o);console.log(d);let i=this.getEditorFromTarget(o);if(i){let c={line:0,ch:0};this.cursorPos?c=this.cursorPos:c=i.getCursor(),i.replaceRange(a,c),setTimeout(()=>{i.focus(),i.setCursor({line:c.line,ch:c.ch+a.length})},500)}else console.warn("No editor found for target element.")}else console.warn("No text found in drop event.")},!0)}onunload(){console.log("Plugin unloaded")}getEditorFromTarget(e){for(let o of this.app.workspace.getLeavesOfType("markdown")){let t=o.view,r=t.editor;if(t.containerEl.contains(e))return r}return null}getAbsolutePath(e){for(let o of this.app.workspace.getLeavesOfType("markdown")){let t=o.view,r=this.app.workspace.getActiveFile();if(r)return this.app.vault.getResourcePath(r)}return null}getObsidianUrl(e){for(let o of this.app.workspace.getLeavesOfType("markdown")){let t=o.view,r=this.app.workspace.getActiveFile();if(r){let a=this.app.vault.getName(),l=r.path;return console.log(l),`obsidian://open?vault=${encodeURIComponent(a)}&file=${encodeURIComponent(l)}`}}return null}formatDroppedText(e){if(e.startsWith("obsidian://open?vault="))try{let o=new URL(e);return`![Image](${decodeURIComponent(o.searchParams.get("file")||"")})`}catch(o){return console.error("Error parsing dropped text:",o),e}return e}};
